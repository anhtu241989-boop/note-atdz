<!DOCTYPE html>
<html lang="en" data-theme="dark">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Note Service</title>

  <!-- CodeMirror CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">

  <style>
    :root {
      --bg-light: #f8fafc;
      --editor-bg-light: #ffffff;
      --text-light: #1e293b;
      --line-numbers-light: #64748b;
      --line-numbers-bg-light: #f1f5f9;
      --border-light: #e2e8f0;
      --header-bg-light: linear-gradient(145deg, #f1f5f9, #e2e8f0);
      --header-text-light: #1e293b;
      --active-line-light: #e0e7ff;
      --scrollbar-light: #94a3b8;
      --button-bg-light: #e5e7eb;
      --button-text-light: #1e293b;

      --bg-dark: #0f172a;
      --editor-bg-dark: #1e293b;
      --text-dark: #e2e8f0;
      --line-numbers-dark: #94a3b8;
      --line-numbers-bg-dark: #1e293b;
      --border-dark: #475569;
      --header-bg-dark: linear-gradient(145deg, #1e293b, #111827);
      --header-text-dark: #e2e8f0;
      --active-line-dark: #334155;
      --scrollbar-dark: #475569;
      --button-bg-dark: #374151;
      --button-text-dark: #e2e8f0;
    }

    [data-theme="light"] {
      --bg: var(--bg-light);
      --editor-bg: var(--editor-bg-light);
      --text: var(--text-light);
      --line-numbers: var(--line-numbers-light);
      --line-numbers-bg: var(--line-numbers-bg-light);
      --border: var(--border-light);
      --header-bg: var(--header-bg-light);
      --header-text: var(--header-text-light);
      --active-line: var(--active-line-light);
      --scrollbar: var(--scrollbar-light);
      --button-bg: var(--button-bg-light);
      --button-text: var(--button-text-light);
    }

    [data-theme="dark"] {
      --bg: var(--bg-dark);
      --editor-bg: var(--editor-bg-dark);
      --text: var(--text-dark);
      --line-numbers: var(--line-numbers-dark);
      --line-numbers-bg: var(--line-numbers-bg-dark);
      --border: var(--border-dark);
      --header-bg: var(--header-bg-dark);
      --header-text: var(--header-text-dark);
      --active-line: var(--active-line-dark);
      --scrollbar: var(--scrollbar-dark);
      --button-bg: var(--button-bg-dark);
      --button-text: var(--button-text-dark);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'JetBrains Mono', monospace;
    }

    body {
      background: var(--bg);
      color: var(--text);
      height: 100vh;
      display: flex;
      flex-direction: column;
      transition: all 0.4s ease;
      animation: fadeIn 0.5s ease-in;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .editor-header {
      background: var(--header-bg);
      color: var(--header-text);
      padding: 12px 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid var(--border);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .editor-title {
      font-size: 16px;
      font-weight: 500;
    }

    .editor-subtitle {
      font-size: 12px;
      opacity: 0.7;
      margin-top: 4px;
    }

    .theme-toggle {
      background: var(--button-bg);
      color: var(--button-text);
      border: none;
      padding: 8px 12px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      gap: 6px;
      transition: all 0.3s ease;
      position: relative;
    }

    .theme-toggle:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .editor-container {
      flex-grow: 1;
      overflow: hidden;
      position: relative;
    }

    .CodeMirror {
      height: 100% !important;
      font-size: 14px;
      line-height: 1.6;
      background: var(--editor-bg);
      color: var(--text);
      border-radius: 8px;
      box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .CodeMirror-gutters {
      background: var(--line-numbers-bg);
      color: var(--line-numbers);
      border-right: 1px solid var(--border);
    }

    .CodeMirror-linenumber {
      padding: 0 10px 0 14px;
      font-size: 13px;
      line-height: 1.6;
    }

    .CodeMirror-selected {
      background: var(--active-line) !important;
    }

    /* Placeholder style */
    .CodeMirror-empty {
      position: relative;
    }
    .CodeMirror-empty::before {
      content: attr(data-placeholder);
      font-family: 'JetBrains Mono', monospace;
      font-size: 13px;
      line-height: 1.6;
      color: var(--text);
      opacity: 0.4;
      font-style: normal;
      position: absolute;
      left: 10px;
      top: 4px;
      pointer-events: none;
      user-select: none;
      padding-left: 40px; /* Đảm bảo không chồng lấn với line numbers */
    }

    .status-bar {
      background: var(--header-bg);
      color: var(--text);
      padding: 8px 16px;
      font-size: 12px;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      gap: 16px;
      border-top: 1px solid var(--border);
      box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
      white-space: nowrap;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .status-indicator {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #22c55e;
      transition: background 0.3s ease;
    }

    .status-indicator.saving {
      background: #f59e0b;
      animation: pulse 1s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }

    @media (max-width: 768px) {
      .editor-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      .theme-toggle { align-self: flex-end; }
      .CodeMirror { font-size: 13px; }
      .status-bar { flex-wrap: wrap; gap: 10px; }
    }
  </style>
</head>
<body>
  <div class="editor-header">
    <div>
      <h3 class="editor-title">Note ATDZ</h3>
      <div class="editor-subtitle">Changes are automatically saved after 1s</div>
    </div>
    <button class="theme-toggle" onclick="toggleTheme()" data-tooltip="Toggle Theme">
      <svg id="theme-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
      </svg>
      <span id="theme-text">Dark Mode</span>
    </button>
  </div>

  <div class="editor-container">
    <textarea id="editor"><%= typeof note !== "undefined" && note ? note.content : "" %></textarea>
  </div>

  <div class="status-bar">
    <div class="status-item">
      <span id="statusIndicator" class="status-indicator"></span>
      <span id="statusText" class="status-text">Ready</span>
    </div>
    <div class="status-item">
      <span id="cursorPosition">Ln 1, Col 1</span>
    </div>
  </div>

  <!-- CodeMirror JS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js"></script>

  <script>
    let editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
      lineNumbers: true,
      lineWrapping: true,
      scrollBarStyle: "simple"
    });

    // Placeholder xử lý
    const editorWrapper = editor.getWrapperElement();
    function updatePlaceholder() {
      if (editor.getValue().length === 0) {
        editorWrapper.classList.add("CodeMirror-empty");
        editorWrapper.setAttribute("data-placeholder", "Start typing...");
      } else {
        editorWrapper.classList.remove("CodeMirror-empty");
        editorWrapper.removeAttribute("data-placeholder");
      }
    }
    updatePlaceholder();
    editor.on("change", updatePlaceholder);

    let timeout;
    editor.on("change", () => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        fetch("/save/<%= typeof noteId !== 'undefined' ? noteId : '' %>", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ content: editor.getValue() })
        }).then(() => {
          const statusIndicator = document.getElementById("statusIndicator");
          const statusText = document.getElementById("statusText");
          statusIndicator.classList.add("saving");
          statusText.textContent = "Saving...";
          setTimeout(() => {
            statusIndicator.classList.remove("saving");
            statusText.textContent = "Saved";
            setTimeout(() => { statusText.textContent = "Ready"; }, 2000);
          }, 1000);
        });
      }, 1000);
    });

    function updateCursorPosition() {
      const pos = editor.getCursor();
      document.getElementById("cursorPosition").textContent = `Ln ${pos.line + 1}, Col ${pos.ch + 1}`;
    }
    editor.on("cursorActivity", updateCursorPosition);

    function toggleTheme() {
      const html = document.documentElement;
      const newDataTheme = html.getAttribute("data-theme") === "dark" ? "light" : "dark";
      html.setAttribute("data-theme", newDataTheme);

      const themeText = document.getElementById("theme-text");
      const themeIcon = document.getElementById("theme-icon");

      if (newDataTheme === "light") {
        themeText.textContent = "Dark Mode";
        themeIcon.innerHTML = '<path d="M21 12.79A9 9 0 1 1 11.21 3A7 7 0 0 0 21 12.79z" stroke="currentColor" stroke-width="2" fill="none"></path>';
      } else {
        themeText.textContent = "Light Mode";
        themeIcon.innerHTML = '<circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"></circle><line x1="12" y1="1" x2="12" y2="3" stroke="currentColor" stroke-width="2"></line>';
      }
    }
  </script>
</body>
</html>
